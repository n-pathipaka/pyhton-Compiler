
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocPRINTleftPLUSrightUMINUSCOMMENT EQUALS EVAL INPUT INT LPAR MINUS PLUS PRINT RPAR VARNAMEmodule : statementsstatements : emptystatements : statements statementstatement : PRINT LPAR expression RPARstatement : VARNAME EQUALS expressionstatement : expressionexpression : expression PLUS expressionexpression : INTexpression : VARNAMEexpression : MINUS expression %prec UMINUSexpression : LPAR expression RPARexpression : EVAL LPAR INPUT LPAR RPAR RPARempty :'
    
_lr_action_items = {'PRINT':([0,2,3,4,7,8,9,14,17,20,21,22,24,27,],[-13,5,-2,-3,-6,-9,-8,-9,-10,-11,-7,-5,-4,-12,]),'VARNAME':([0,2,3,4,6,7,8,9,10,12,14,15,16,17,20,21,22,24,27,],[-13,8,-2,-3,14,-6,-9,-8,14,14,-9,14,14,-10,-11,-7,-5,-4,-12,]),'INT':([0,2,3,4,6,7,8,9,10,12,14,15,16,17,20,21,22,24,27,],[-13,9,-2,-3,9,-6,-9,-8,9,9,-9,9,9,-10,-11,-7,-5,-4,-12,]),'MINUS':([0,2,3,4,6,7,8,9,10,12,14,15,16,17,20,21,22,24,27,],[-13,10,-2,-3,10,-6,-9,-8,10,10,-9,10,10,-10,-11,-7,-5,-4,-12,]),'LPAR':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,20,21,22,23,24,27,],[-13,6,-2,-3,12,6,-6,-9,-8,6,18,6,-9,6,6,-10,-11,-7,-5,25,-4,-12,]),'EVAL':([0,2,3,4,6,7,8,9,10,12,14,15,16,17,20,21,22,24,27,],[-13,11,-2,-3,11,-6,-9,-8,11,11,-9,11,11,-10,-11,-7,-5,-4,-12,]),'$end':([0,1,2,3,4,7,8,9,14,17,20,21,22,24,27,],[-13,0,-1,-2,-3,-6,-9,-8,-9,-10,-11,-7,-5,-4,-12,]),'PLUS':([7,8,9,13,14,17,19,20,21,22,27,],[15,-9,-8,15,-9,-10,15,-11,-7,15,-12,]),'EQUALS':([8,],[16,]),'RPAR':([9,13,14,17,19,20,21,25,26,27,],[-8,20,-9,-10,24,-11,-7,26,27,-12,]),'INPUT':([18,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'statements':([0,],[2,]),'empty':([0,],[3,]),'statement':([2,],[4,]),'expression':([2,6,10,12,15,16,],[7,13,17,19,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> statements','module',1,'p_module','myParser.py',22),
  ('statements -> empty','statements',1,'p_statements','myParser.py',27),
  ('statements -> statements statement','statements',2,'p_statements_list','myParser.py',31),
  ('statement -> PRINT LPAR expression RPAR','statement',4,'p_print_statement','myParser.py',51),
  ('statement -> VARNAME EQUALS expression','statement',3,'p_assign_statement','myParser.py',55),
  ('statement -> expression','statement',1,'p_expression_statement','myParser.py',59),
  ('expression -> expression PLUS expression','expression',3,'p_plus_expression','myParser.py',63),
  ('expression -> INT','expression',1,'p_int_expression','myParser.py',67),
  ('expression -> VARNAME','expression',1,'p_varname_expression','myParser.py',71),
  ('expression -> MINUS expression','expression',2,'p_negate_expression','myParser.py',75),
  ('expression -> LPAR expression RPAR','expression',3,'p_parenthesis_expression','myParser.py',79),
  ('expression -> EVAL LPAR INPUT LPAR RPAR RPAR','expression',6,'p_eval_input_expression','myParser.py',83),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',87),
]
